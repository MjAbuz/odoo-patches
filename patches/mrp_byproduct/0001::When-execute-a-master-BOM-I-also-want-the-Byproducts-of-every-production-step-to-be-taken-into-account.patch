=========================================================================================

As a user of multilevel BOMs, I want to define inidividual compartimentalized
BOMs, for example as production steps in a multi step production configuration.
Each step, I define in it's own little BOM. Some steps might produce waste
which as a matter of control, I want to measure, in other cases, is valuable
input for other production steps.
    
Therefore, when I execute a master BOM, I also want the Byproducts of every
production step to be taken into account.
    
In the above mentioned use case, they are strictly cumulative, as every individual
subprocess are generating waste products independently.
    
If I where to compone a master BOM aut of configurable parts, which do not represent
individual production processes, and have a waste product on the overall process,
I then would probably prefer assigning sub products on the master BOM.
    
Another use case, is a FORMULA, which can result in different output presentations.
In this case, the formula includes the wase product, but the respective USE CASE BOM
would define actual quantities and consumption. For obvious reasons, I want to be able
to manage the wast on the formula level. 

=========================================================================================

 addons/mrp_byproduct/models/mrp_production.py | 5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

diff --git a/addons/mrp_byproduct/models/mrp_production.py b/addons/mrp_byproduct/models/mrp_production.py
index c60c67ab4f0..c20f4f43670 100644
--- a/addons/mrp_byproduct/models/mrp_production.py
+++ b/addons/mrp_byproduct/models/mrp_production.py
@@ -39,6 +39,9 @@ class MrpProduction(models.Model):
         """
         res = super(MrpProduction, self)._generate_moves()
         for production in self.filtered(lambda production: production.bom_id):
-            for sub_product in production.bom_id.sub_products:
+            factor = production.product_uom_id._compute_quantity(production.product_qty, production.bom_id.product_uom_id) / production.bom_id.product_qty
+            boms, lines = production.bom_id.explode(production.product_id, factor, picking_type=production.bom_id.picking_type_id)
+            for (bom, bom_data) in boms:
+                for sub_product in bom.sub_products:
                     production._create_byproduct_move(sub_product)
         return res
